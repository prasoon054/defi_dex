{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenB",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "depositLiquidity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReserves",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_reserveA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveB",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSpotPriceAinB",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSpotPriceBinA",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lpToken",
				"outputs": [
					{
						"internalType": "contract LPToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "reserveA",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "reserveB",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountAIn",
						"type": "uint256"
					}
				],
				"name": "swapTokenAForTokenB",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountBIn",
						"type": "uint256"
					}
				],
				"name": "swapTokenBForTokenA",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenA",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenB",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lpAmount",
						"type": "uint256"
					}
				],
				"name": "withdrawLiquidity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_tokenA": "The address of TokenA.",
						"_tokenB": "The address of TokenB."
					}
				},
				"depositLiquidity(uint256,uint256)": {
					"params": {
						"amountA": "The amount of TokenA to deposit.",
						"amountB": "The amount of TokenB to deposit. Requirements: - If the pool already has liquidity, deposits must preserve the current ratio."
					}
				},
				"getSpotPriceAinB()": {
					"returns": {
						"_0": "The price scaled by 1e18."
					}
				},
				"getSpotPriceBinA()": {
					"returns": {
						"_0": "The price scaled by 1e18."
					}
				},
				"swapTokenAForTokenB(uint256)": {
					"params": {
						"amountAIn": "The amount of TokenA the trader is swapping."
					}
				},
				"swapTokenBForTokenA(uint256)": {
					"params": {
						"amountBIn": "The amount of TokenB the trader is swapping."
					}
				},
				"withdrawLiquidity(uint256)": {
					"params": {
						"lpAmount": "The amount of LP tokens to redeem."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Initialize the DEX with the addresses of TokenA and TokenB."
				},
				"depositLiquidity(uint256,uint256)": {
					"notice": "Deposit liquidity into the pool."
				},
				"getReserves()": {
					"notice": "Returns the current reserves of TokenA and TokenB in the pool."
				},
				"getSpotPriceAinB()": {
					"notice": "Returns the spot price of TokenA in terms of TokenB."
				},
				"getSpotPriceBinA()": {
					"notice": "Returns the spot price of TokenB in terms of TokenA."
				},
				"swapTokenAForTokenB(uint256)": {
					"notice": "Swap an exact amount of TokenA for as many TokenB as possible."
				},
				"swapTokenBForTokenA(uint256)": {
					"notice": "Swap an exact amount of TokenB for as many TokenA as possible."
				},
				"withdrawLiquidity(uint256)": {
					"notice": "Withdraw liquidity from the pool."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/DEX.sol": "DEX"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a",
			"license": "MIT",
			"urls": [
				"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a",
				"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contracts/DEX.sol": {
			"keccak256": "0x7ca0b27cd1f053e3391b79743ab172f3eddf0a35bea6aeb68357fabf9d3b8ac9",
			"license": "MIT",
			"urls": [
				"bzz-raw://011fd944285765951dcf101a2e10ae3516459554d730007a50a8c51fd35e854b",
				"dweb:/ipfs/Qmcg56rd5LhQZT4SaoJ4ty4fBX1jNvUKpccjeBdby4ZZic"
			]
		},
		"contracts/LPToken.sol": {
			"keccak256": "0x5975b36ec744671e9a574cc34fe8dcb9625fe32709d01c1db29ebc07c138f2db",
			"license": "MIT",
			"urls": [
				"bzz-raw://32c240fbe3a256f2f1181686079181738f1a81ed6be8a246b2bd4c0726491800",
				"dweb:/ipfs/QmdEBjARLTSG6w3TUVM6MGuwoU87sAWnAifjm9CYHtXxum"
			]
		}
	},
	"version": 1
}